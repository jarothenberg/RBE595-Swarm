#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

#
# Compiling and running the code
#
# - In the ARGoS window: Pause the simulation (if it's not paused already)
# - In the editor: do what you need, save, press the "Execute" button
# - In the ARGoS window: Press the "Play", "Step", or "Fast Forward" buttons
#

#
# This editor sucks.
#
# I know.
#
# But when it's open, it detects whether the open files have been modified elsewhere.
# So open this editor and then open the file you wanna edit in your favorite editor.
# When you save in your editor, the changes will be reflected here. Press Execute to compile and run.
# If you want syntax highlighting, JavaScript is pretty similar to Buzz.
#

include "../../Buzz/src/include/vec2.bzz"
#include "../../../WPI_SwarmIntel/Buzz/src/include/vec2.bzz"

numRobots = 30
all_colors = {}
all_colors["RED"] =        {.r = 255, .g = 000, .b = 000, .num = 15}
all_colors["ORANGE"] =     {.r = 255, .g = 128, .b = 000, .num = 0}
all_colors["YELLOW"] =     {.r = 255, .g = 255, .b = 000, .num = 0}
all_colors["CHARTREUSE"] = {.r = 128, .g = 255, .b = 000, .num = 0}
all_colors["GREEN"] =      {.r = 000, .g = 255, .b = 000, .num = 0}
all_colors["SPRING"] =     {.r = 000, .g = 255, .b = 128, .num = 0}
all_colors["CYAN"] =       {.r = 000, .g = 255, .b = 255, .num = 0}
all_colors["AZURE"] =      {.r = 000, .g = 128, .b = 255, .num = 0}
all_colors["BLUE"] =       {.r = 000, .g = 000, .b = 255, .num = 15}
all_colors["VIOLET"] =     {.r = 128, .g = 000, .b = 128, .num = 0}
all_colors["MAGENTA"] =    {.r = 255, .g = 000, .b = 255, .num = 0}
all_colors["ROSE"] =       {.r = 255, .g = 000, .b = 128, .num = 0}

logRobot = 0

function diffuse() {	
	# Get and sum proximity readings together
	cAccumulator = math.vec2.new(0.0, 0.0)
	foreach(proximity, function(key,prox) {
		cAccumulator = math.vec2.add(cAccumulator, math.vec2.newp(prox.value, prox.angle))
	})
	
	cAccumulator = math.vec2.scale(cAccumulator, 1.0/size(proximity))
	# If the angle of the vector is small enough and the closest obstacle
	# is far enough, continue going straight, otherwise curve a little
	cAngle = math.vec2.angle(cAccumulator)
	#if (id == 22) {log(cAngle)}
	if(math.vec2.length(cAccumulator) <= m_fDelta) {
		# Go straight 
		set_wheels(m_fWheelVelocity, m_fWheelVelocity)
	}
	else {
		# Turn, depending on the sign of the angle
		if(cAngle > 0.0) {
			set_wheels(m_fWheelVelocity, 0.0)
		}
		else {
			set_wheels(0.0, m_fWheelVelocity)
		}
	}
}


# This function is executed once at init time
function init() {
	m_fWheelVelocity = 10.0
	m_fDelta = 0.0
		
	math.rng.setseed(id)
	
	idCounter = 0
	totalIdCounter = 0
	foreach(all_colors, function(key, value) {
		while (idCounter < value.num) {
			if (id == totalIdCounter) {
				set_color(key)
				#log("Setting ID: ", id, " Color: ", key)
			}
			idCounter = idCounter + 1
			totalIdCounter = totalIdCounter + 1
		}
		idCounter = 0
	})

	listRad = 50
	checkNum = 5
	neighbor_colors = {}
	swarm_state_colors = {}
	
	neighbors.listen("colors", function(vid, value, rid) {
		swarm_state_colors[rid] = value
		if ((neighbor_colors[rid] == nil) and (neighbors.get(rid).distance <= listRad)) {
				#log("RID: ", rid, ", COL: ", value)
				neighbor_colors[rid] = value
		}
	})
}

function check_neighbors() {
	colorNums = {}
	if (size(neighbor_colors) >= checkNum) {
		maxColorNum = 0
		maxColor = ""
		foreach (neighbor_colors, function(key,value) {
			if (colorNums[value] == nil) {
				colorNums[value] = 1
			}
			else {
				colorNums[value] = colorNums[value]+1
			}
			if (colorNums[value] > maxColorNum) {
					maxColorNum = colorNums[value]
					maxColor = value
			}
		})
		set_color(maxColor)
		#log("CHANGING COLOR: ", maxColor)
		neighbor_colors = {}
	}

		#if (id == 13) {
		swarm_state_colors[id] = color
	#}
	blueCount = 0.0
	foreach(swarm_state_colors, function(key, value) {
		if (value == "BLUE") {
			blueCount = blueCount + 1
		}
	})
	if (id == logRobot) {
		s = blueCount/numRobots
		#log("R13 says b=", blueCount, ", total=", numRobots)
		log(s)
	}
}

function set_color(colorStr) {
	if (not all_colors[colorStr] == nil) {
		color = colorStr
		colorRGB = all_colors[colorStr]
		set_leds(colorRGB.r, colorRGB.g, colorRGB.b)
		#debug.set_color(colorRGB.r, colorRGB.g, colorRGB.b)
	}
	else {
		#log("Color: ", colorStr, " is not defined")
	}
}


# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {
	diffuse()
	check_neighbors()
	neighbors.broadcast("colors", color)
}

# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
}
